<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>My RSS Feed</title>
    <link>https://jfg.name/</link>
    <atom:link href="https://jfg.name/feed.rss" rel="self" type="application/rss+xml"/>
    <description></description>
    <lastBuildDate>Tue, 23 Jul 2024 21:15:54 GMT</lastBuildDate>
    <language>en</language>
    <generator>Lume v2.0.3</generator>
    <item>
      <link>https://jfg.name/projects/</link>
      <guid isPermaLink="false">https://jfg.name/projects/</guid>
      <content:encoded>
        <![CDATA[<h2>Projects</h2>
        <h3 style="text-align: center">
        <a href="https://git-for-graduates.pages.dev/">Git for Graduates</a> (2024)
        </h3>
        <p><img src="https://jfg.name/img/git-for-grads.webp" width="300" style="display: block;
        margin: 0 auto"/></p>
        <p>I wrote this guide after teaching some graduate developers how to use Git
        effectively. Most universities don't teach it to the standard required in
        industry, with many graduates being unable to distinguish between a merge and a
        rebase in interview. This book is intended to be &quot;everything I wish I knew about
        Git when I was a graduate&quot;, a halfway between &quot;just read the man file&quot; and <a href="https://git-scm.com/book/en/v2">the
        excellent Pro Git book</a>.</p>
        <p>This ebook is formatted to be easily readable on a phone screen during a lunch
        break, and it is free, <em>forever</em>. I wrote it over a period of two weeks from
        notes I put together. It uses <code>pandoc</code> to generate the PDF, and it is hosted
        using a free <a href="https://pages.dev/">Cloudflare Pages</a> account.</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 23 Jul 2024 21:15:07 GMT</pubDate>
    </item>
    <item>
      <link>https://jfg.name/about/</link>
      <guid isPermaLink="false">https://jfg.name/about/</guid>
      <content:encoded>
        <![CDATA[<h2>About</h2>
        <p>Joe is a software developer, with a current emphasis on Geospatial and
        Geomatics.</p>
        <section class="notice">
        <b>⚠️ NOTICE</b>
        <br/>
        The author does not provide contact details and does not wish to
        engage in private correspondence with anyone he does not know in
        person.
        </section>
        <h2>Colophon</h2>
        <p>This site is built with <a href="https://deno.com/">Deno</a>, <a href="https://lume.land/">Lume</a>,
        and <a href="https://simplecss.org/">Simple.css</a>, packaged together in
        <a href="https://github.com/joefg/lume-simple-blog">lume-simple-blog</a> and available
        free-of-charge through that GitHub repository.</p>
        <p>The contents of this site remain copyright of the author and must not be
        reproduced elsewhere. Media must not be hotlinked.</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 23 Jul 2024 21:03:25 GMT</pubDate>
    </item>
    <item>
      <link>https://jfg.name/</link>
      <guid isPermaLink="false">https://jfg.name/</guid>
      <content:encoded>
        <![CDATA[<h2>Posts</h2>
        
        <ul class="postList" style="list-style:none">
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/bring-back-dotplans/" ><strong>Bring back .plan files</strong></a>
        -
        <em><time datetime="29/05/2024">
        29/05/2024
        </time></em>
        </li>
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/developer-ergonomics/" ><strong>Developer Ergonomics</strong></a>
        -
        <em><time datetime="07/05/2024">
        07/05/2024
        </time></em>
        </li>
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/using-jupyter-with-pipenv/" ><strong>Using Jupyter with Pipenv</strong></a>
        -
        <em><time datetime="19/04/2024">
        19/04/2024
        </time></em>
        </li>
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/accelerate/" ><strong>White Heat: The case for Acceleration</strong></a>
        -
        <em><time datetime="23/02/2024">
        23/02/2024
        </time></em>
        </li>
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/cgis-not-dead/" ><strong>CGI&#39;s not dead, I wrote some yesterday</strong></a>
        -
        <em><time datetime="01/04/2023">
        01/04/2023
        </time></em>
        </li>
        
        </ul>
        
        ]]>
      </content:encoded>
      <pubDate>Tue, 23 Jul 2024 18:32:54 GMT</pubDate>
    </item>
    <item>
      <title>Bring back .plan files</title>
      <link>https://jfg.name/posts/bring-back-dotplans/</link>
      <guid isPermaLink="false">https://jfg.name/posts/bring-back-dotplans/</guid>
      <description>Why we should go back to the future and embrace plain text</description>
      <content:encoded>
        <![CDATA[<blockquote>
        <p>TL;DR we should bring back dotplans using Markdown and HTTP(S)</p>
        </blockquote>
        <h2>What's a dotplan?</h2>
        <p><code>.plan</code> files are a holdover from a period of time when everyone who was on a
        networked computing environment could reasonably use a command line. They used
        to be a way of finding information about a specific user (like whether they were
        online, what their office hours were, and in the case of remote workers, where
        in the world they actually were). All a user had to do was run <code>finger &lt;user&gt;@&lt;host&gt;</code> and they would be given this information.</p>
        <p>A famous use of the <code>.plan</code> file: <a href="https://github.com/ESWAT/john-carmack-plan-archive">John
        Carmack</a> would use them to
        document what he was doing. In the days of Quake and Doom, there would even be
        websites which were a frontend to <code>finger</code> which would archive what he was
        doing, and this practice spread out of Id Software and into the wider Dallas
        game design bubble.</p>
        <p>I think many people are sick of the always-on nature of modern communications.</p>
        <p>Why can't we bring <code>.plan</code> files back?</p>
        <h2>What has changed since those days</h2>
        <ol>
        <li>
        <p>Most networked devices are not a UNIX and do not have the <code>finger</code>
        <a href="https://en.wikipedia.org/wiki/Finger_(protocol)">daemon</a> running, and even if
        they did, most routers sinkhole it from the outside world in the case of
        residential connections, and most sysadmins now frown upon running any unneeded
        services on developer machines.</p>
        </li>
        <li>
        <p>Hosting a website is very easy. <code>.plan</code> files came around because it was
        easier to write to a text file for an already-running daemon to pick up than it
        was to stand up a web server with which to write text to. It's the opposite now.
        For example, this site is currently hosted on GitHub Pages, which is very easy
        for anyone with a GitHub account and a modicum of Git experience.</p>
        </li>
        <li>
        <p>We have X <em>the everything app</em> now. Even John Carmack gave up his blog in
        favour of Xitter. The nice thing about this distinction is that you can keep
        your <code>.plan</code> file somewhere which requires a little technical skill to get at,
        so you can write about technical topics and anything else with much greater
        candour.</p>
        </li>
        </ol>
        <p>With this in mind, let's update the concept of a <code>.plan</code> file to the modern day.</p>
        <h2>Proposing: neoplan</h2>
        <p>I propose <em>neoplan</em>: a HTTP(s) dotplan file. Back to the future with <code>neoplan</code>.
        An anti-Facebook or anti-Xitter for people with technical chops. No images, no
        comments, no dogpiles, no algorithms, just text.</p>
        <p>I used something similar in a previous job: we were all on servers running
        Apache on a VPN, and before Slack and Teams, we would put our office hours on
        <code>index.html</code>, along with what we were doing that day and where in the world we
        were working from.</p>
        <h3>Hosting</h3>
        <p>Stick it in plain text on <code>&lt;host&gt;/.plan</code>. Serve it over HTTP(s) in
        plain text.  Write it in Markdown (but this is entirely up to you, even write it
        in <a href="https://orgmode.org/">Org Mode</a> if you want). Update it in the text editor
        of your choice. It's literally a text file. You could even set your web server
        up to periodically copy notes from a Dropbox or something like that. It's up to you, but
        you will be constrained by it being literally plain text and that is absolutely fine.</p>
        <h3>Fetching</h3>
        <p>It should be accessible over HTTP(S) with a single <code>curl</code> request. The following should work:</p>
        <pre><code>curl &lt;host&gt;/.plan | $EDITOR
        </code></pre>
        <p>Alias this command to <code>neoplan</code> or something like that. It's just a <code>curl</code> oneliner.</p>
        <h3>Goals</h3>
        <p>I don't want this to become gentrified like many other technical works. I don't
        want a GUI for browsing <code>.plan</code> files. It should be down to the developer to
        make something that works for them in this respect.</p>
        <p>I want this to be for technical people only. The only way it can stay this way
        is for it to be both complex for outsiders and ridiculously simple for insiders.
        Tough enough to be significant but simple enough to protect. I want the
        specification for this to fit in one sentence with a client in one line of Bash
        so that it becomes part of software oral tradition.</p>
        <p>It should be a safe space away from algorithms, indexers, and AI-generated slop.
        While anything accessible over HTTP will be absorbed by the borg at some point,
        I want this to be something that developers actually care about enough to not
        want to ruin it for everyone.</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 29 May 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Developer Ergonomics</title>
      <link>https://jfg.name/posts/developer-ergonomics/</link>
      <guid isPermaLink="false">https://jfg.name/posts/developer-ergonomics/</guid>
      <description>Building a comfy setup</description>
      <content:encoded>
        <![CDATA[<p>I spend six-plus hours a day developing software. This is what I use to stay
        sane.</p>
        <blockquote>
        <p>Ergonomics is a method of design that focuses on creating objects based on the
        physical measure of the human body and the physical processes of people.</p>
        <p><a href="http://blogs.evergreen.edu/brookewalsh/what-is-ergonomics/">http://blogs.evergreen.edu/brookewalsh/what-is-ergonomics/</a></p>
        </blockquote>
        <h2>Linting and Typing</h2>
        <p>First things first: do your projects have linters? Are they typed, either at run
        time or with a type checker?</p>
        <p>Start there. Use a linter. Use a type system.</p>
        <p>It's more work, but it's worth it. Here's an example:</p>
        <pre><code class="language-python">import sqlite3
        
        class SpatialiteConnection():
        def __init__(self, location):
        if location:
        self.conn = sqlite3.connect(os.path.join(location))
        else:
        self.conn = sqlite3.connect(':memory:')
        self.conn.row_factory = lambda cursor, result: \
        dict(zip([column[0] for column in cursor.description], result))
        self.conn.enable_load_extension(True)
        self.conn.execute('SELECT load_extension(&quot;mod_spatialite&quot;)')
        self.conn.execute('SELECT InitSpatialMetaData(1);')
        
        def __enter__(self):
        return self.conn
        
        def __exit__(self, exc_type, exc_value, exc_traceback):
        self.conn.close()
        </code></pre>
        <p>How are you supposed to know what this class expects and what it returns when
        used in the context handler? And what happens when another developer comes along
        and changes what it returns? You don't compile Python, and while your unit tests
        might still work, that change in type might only be apparent on an unhappy path
        only traversed in production, which is not what you want.</p>
        <p>Let's add some types here.</p>
        <pre><code class="language-python">from typing import Optional
        import sqlite3
        
        class SpatialiteConnection():
        def __init__(self, location: Optional[str]) -&gt; None:
        if location:
        self.conn = sqlite3.connect(os.path.join(location))
        else:
        self.conn = sqlite3.connect(':memory:')
        self.conn.row_factory = lambda cursor, result: \
        dict(zip([column[0] for column in cursor.description], result))
        self.conn.enable_load_extension(True)
        self.conn.execute('SELECT load_extension(&quot;mod_spatialite&quot;)')
        self.conn.execute('SELECT InitSpatialMetaData(1);')
        
        def __enter__(self) -&gt; sqlite3.Connection:
        return self.conn
        
        def __exit__(self, exc_type, exc_value, exc_traceback) -&gt; None:
        self.conn.close()
        </code></pre>
        <p>Adding types makes things more obvious to the developer, and using a type
        checker such as Python's <a href="https://www.mypy-lang.org/">Mypy</a> or a typing system
        such as <a href="https://www.typescriptlang.org/">TypeScript</a> as part of the development
        process picks off type-related blunders.</p>
        <p>This comes at the expense of development speed; in my experience, a type system
        slows down iteration in the early stages, so take this into consideration before
        sticking a type checker on your project.</p>
        <p>I believe this trade-off to be wise, so set up a linter and a typing system
        before you write a single line of code, and that'll set your project in good
        stead.</p>
        <h2>Runfiles and Task Runners</h2>
        <p>If you juggle lots of projects, it can be a mild nuisance remembering if it was
        <code>python3 -m uvicorn main:app</code> which ran it, or whether it was <code>yarn run serve</code>,
        or <code>source venv/bin/activate; python3 bin/serve.py</code> or whatever.</p>
        <p>Avoid all of this by using one run file template across all projects. Use the
        same commands across all projects to do the same thing:</p>
        <ul>
        <li>
        <p><code>restore</code> for fetching dependencies</p>
        </li>
        <li>
        <p><code>build</code> for constructing prerequisites for a clean run</p>
        </li>
        <li>
        <p><code>dev</code> for a development environment</p>
        </li>
        <li>
        <p><code>serve</code> for a production service</p>
        </li>
        <li>
        <p><code>console</code> for accessing an administration interface for a service</p>
        </li>
        <li>
        <p><code>test</code> for running all tests</p>
        </li>
        <li>
        <p><code>lint</code> for running all linters and type checkers</p>
        </li>
        </ul>
        <p>Something like <a href="https://github.blog/2015-06-30-scripts-to-rule-them-all/">Scripts To Rule Them
        All</a>.</p>
        <p>It's a shame there's not one single standard for a task runner. Deno has a <a href="https://docs.deno.com/runtime/manual/tools/task_runner">task
        runner</a> built-in, which
        allows me editing this page to build the site by running <code>deno task build</code>, but
        that's not quite the same as a single task runner with hardcoded arguments
        pointing to user-defined commands.</p>
        <p>Not having a common task runner means every single org builds their own, which
        is a huge detriment to new starters.</p>
        <h2>Note Taking</h2>
        <p>I keep my daily notes in <code>~/.todo</code>, with this script:</p>
        <pre><code class="language-sh">#!/usr/bin/env sh
        
        function header(){
        cat &lt;&lt; EOM
        $(date '+%d/%m/%Y')
        
        ---
        
        EOM
        }
        
        function todo(){
        local TODAY_FILE=~/.todo/$(date -I).md
        local YESTERDAY_FILE=~/.todo/$(date -I --date='yesterday').md
        
        mkdir -p ~/.todo
        if [ ! -f $TODAY_FILE ]; then
        touch $TODAY_FILE
        header &gt; $TODAY_FILE
        if [ -f $YESTERDAY_FILE ]; then
        cat $YESTERDAY_FILE &gt;&gt; $TODAY_FILE
        fi
        fi
        
        $EDITOR $TODAY_FILE
        }
        
        todo
        </code></pre>
        <p>This creates a todo notepad containing yesterday's todo list, which serves as a
        useful reminder of anything left over from the previous business day. All notes
        are written in beautiful Markdown, with conversion handled with
        <a href="https://pandoc.org/">Pandoc</a> and
        diagrams written in <a href="https://graphviz.org/">Graphviz</a>.</p>
        <p>I have a grid lined Moleskine which I've been jotting ideas down in for the past
        ten years. My handwriting is not great, but jotting something down which makes
        you think about what you're writing because there's no <code>db</code> movement for
        parchment.</p>
        <p>If I'm out and about and I don't have access to a notepad, I'll write something
        down in a messaging app and send it to myself.</p>
        <p><em>The Pragmatic Programmer</em> calls these
        <a href="https://www.oreilly.com/library/view/the-pragmatic-programmer/9780135956977/f_0041.xhtml">Daybooks</a>.
        I found them to be immensely useful. Being able to recognise a problem that you
        may have encountered before and immediately finding your solution (or thoughts
        approaching a solution) is almost like a superpower. I did have a prototype of
        feeding my daybooks into a language model so I can ask myself if I encountered a
        problem before, but it didn't go anywhere.</p>
        <h2>Tiling Windows</h2>
        <p>I like a good tiling window manager. For a long time I used
        <a href="https://i3wm.org/">i3</a> and <a href="https://swaywm.org/">Sway</a>, but stopped because of
        the customisation minefield that both of those things encourage. I used to have
        plenty of time to soup up a Sway config, but now I don't, so I moved back to a
        more conventional desktop environment.</p>
        <p>I use <a href="https://www.gnome.org/">Gnome</a>. Ubuntu ships with <a href="https://extensions.gnome.org/extension/3733/tiling-assistant/">Tiling
        Assistant</a>, but I
        prefer <a href="https://extensions.gnome.org/extension/4548/tactile">Tactile</a>. Tiling
        Assistant is simpler but Tactile is more comprehensive. Both allow me to manage
        either squeezing as much as I can into a 13-inch laptop screen or organising
        over multiple displays. I do this using the following settings:</p>
        <pre><code>-- four windows
        
        | W | R |
        | S | F |
        
        -- nine windows
        
        | Q | W | E |
        | A | S | F |
        | Z | X | C |
        
        -- twelve windows
        
        | Q | W | E | R |
        | A | S | D | F |
        | Z | X | C | V |
        </code></pre>
        <p>I use the four-windows setup for smaller screens, nine-windows for larger
        screens, and twelve-windows for multiple screens.</p>
        <p>One layout that I use is to keep the editor in regions W to C, with R to V for
        the terminal and Q to Z for the web browser. This puts the editor right in
        front of you, limiting how much you strain your eyes.</p>
        <p><img src="https://jfg.name/img/ergonomics-layout.webp" alt="Ergonomic windows"></p>
        <p>The aim is to have the thing you're going to be interacting with most often
        front and centre, with everything else in the periphery.</p>
        <p>The important thing is that a tiling window manager makes this possible. If
        you're on Windows,
        <a href="https://learn.microsoft.com/en-gb/windows/powertoys/fancyzones">FancyZones</a>
        does similar.</p>
        <p>I also use workspaces. One workspace is for communications and emails, one for
        media, and one is for development work. This allow me to keep my flow when
        developing.</p>
        <p>It's a shame that there's no way to have a text editor appear over the thing
        which is directly affected by the text being edited, but here we are.</p>
        <h2>Text Editor and the Terminal</h2>
        <p>I like Neovim and use it to write the first draft, but I use VSCode with
        <a href="https://marketplace.visualstudio.com/items?itemName=vscodevim.vim">VSCodeVim</a>
        to touch it up. VSCode's terminal has support for tmux which is also handy.</p>
        <p>VSCode's <a href="https://code.visualstudio.com/docs/editor/intellisense">IntelliSense</a>
        and
        <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.vscode-pylance">Pylance</a>
        makes refactoring Python easier, so no more <code>git grep -i some_function -- *.py</code>
        and whack-a-mole renaming or project-wide <code>sed</code> magic. It is worth noting that
        the technology behind this, Language Servers, are <a href="https://github.com/VonHeikemen/lsp-zero.nvim">available for
        Neovim</a> and other editors.</p>
        <p>I use tmux inside the standard Gnome terminal, which works well enough for me.</p>
        <p>The <a href="https://github.com/tmux/tmux/wiki/Getting-Started">standard tmux keymap</a> is
        OK, but could be improved. I find <a href="https://zserge.com/posts/tmux/">tmux for mere
        mortals</a> to have a pretty solid layout and I've
        used it for many years now.</p>
        <p>I still use tmux and Neovim for smaller projects because they stay out of my
        way, but if I want linters and type checking in the editor window or
        <a href="https://containers.dev/">Development Containers</a> I'll use VSCode.</p>
        <h2>Hardware</h2>
        <p>Get a good chair. I'm happy with my
        <a href="https://en.wikipedia.org/wiki/Aeron_chair">Aeron</a>-- it helps to know someone
        who works in liquidations for the various Silicon Fen startups to get one at a
        discount. Paying £1000 for a chair as a solo developer is comical, but a
        lightly-used Aeron at £300 is a good deal. You place your carcass on it for a
        good portion of the day, so make it comfortable.</p>
        <p>Get a decent desk. A wobbly desk will drive you crazy. It should sit high enough
        so you don't slouch. I don't believe in the standing desk hype, but the
        adjustability is helpful. Keep your drinks on a coaster to avoid staining the
        desk.</p>
        <p>Get a proper monitor stand. Your copy of &quot;Structure and Interpretation of
        Computer Programs&quot; belongs on a bookshelf, not under your monitor. The centre of
        the monitor should be level with your eyes. If you have multiple monitors, make
        sure you're not staring at bezels when looking straight ahead. It's also worth
        considering getting a docking station so there's no rat's nest of cables running
        from your laptop to the monitor.</p>
        <p>Bluetooth headphones are worth having. I got tired of wired headsets leaving a
        mess and I took the plunge after standing up too quickly, pulling my very
        expensive laptop off the desk and onto the hard wood floor.</p>
        <p>A decent keyboard is good to have as is a decent mouse, but as long as the
        keyboard goes &quot;click click click&quot; and the mouse has more than the usual amount
        of buttons I'm happy.</p>
        <h2>Habits</h2>
        <p>Sitting at a desk for eight hours a day is <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC7700832/">probably killing
        you</a>. At least break the
        day up!</p>
        <p>For your lunch hour: turn your phone off. Leave the desk. Go for a walk. Don't
        look at any screen. Don't doomscroll. That email can wait. Don't get in your car
        and drive to the shop. Just enjoy being outdoors for a bit. You'll come back
        refreshed and ready to work again.</p>
        <p>If I find myself at a mental block, I take a break. I have a pull-up bar sitting
        on my door, a pair of gymnast rings, and a pair of paralettes on my desk. I do
        pull-ups and press-ups, some light calisthenics to take my mind off work for a
        bit. I find the <a href="https://pomofocus.io/">Pomodoro Technique</a> to work well with
        enforcing breaks.</p>
        <p>It's very important to spend time away from the screen. Pick a hobby that's
        preferably away from a screen and away from any sort of internet connection.
        Ever wondered why so many software developers take up kayaking, hiking, and rock
        climbing?  It's because of this. The red pipelines can't reach you when you're
        disconnected.</p>
        <p><img src="https://jfg.name/img/rather-be-kayaking.webp" alt="Rather be kayaking"></p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 07 May 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Using Jupyter with Pipenv</title>
      <link>https://jfg.name/posts/using-jupyter-with-pipenv/</link>
      <guid isPermaLink="false">https://jfg.name/posts/using-jupyter-with-pipenv/</guid>
      <description>Building a data science environment</description>
      <content:encoded>
        <![CDATA[<p>Being vaguely involved in data science tooling means I have some exposure to
        <a href="https://jupyter.org/">Jupyter</a>, and this is the setup that I found works for me.</p>
        <h2>Environment Management</h2>
        <p>I use <a href="https://pipenv.pypa.io/en/latest/">Pipenv</a>-- no real reason to use this
        over <a href="https://python-poetry.org/">Poetry</a>, but I like Pipenv's ability to create
        a virtualenv elsewhere on the system and I think the API's a little bit cleaner.</p>
        <p>Really, as long as it creates a virtualenv and Jupyter can see this virtualenv,
        it'll be fine.</p>
        <p>Make sure you have Pipenv installed, then make a Pipenv environment.</p>
        <pre><code class="language-bash">pipenv --python 3.11        # Create the environment
        pipenv install jupyter      # Add jupyter to it
        pipenv run jupyter notebook # Spawn a Jupyter server
        </code></pre>
        <p>This approach does create a Jupyter install per project. I think this is fine,
        it cuts down complexity, and Jupyter isn't that heavy these days. If you want to
        use a system-wide Jupyter, you can do the following:</p>
        <pre><code class="language-bash"># Inside your project folder
        cd project-folder/
        pipenv install ipykernel
        
        # Add the kernel to the user's ipython kernels
        pipenv shell
        python3 -m ipykernel install --user --name=&lt;your-venv-name&gt;
        
        # Outside of the shell (deactivate)
        jupyter notebook
        </code></pre>
        <p>This should allow your kernel to be used inside the system Jupyter server. I
        prefer not doing this and keeping it simpler with a Jupyter server inside every
        data science environment. There are disadvantages here: you can't run more than
        one project at a time, and you can't share kernels between projects, but I
        haven't run into those yet.</p>
        <h2>The Runfile</h2>
        <p>In keeping with the
        <a href="https://github.blog/2015-06-30-scripts-to-rule-them-all/">Runfiles</a> that I use
        elsewhere, this is a slim one that I use.</p>
        <pre><code class="language-bash">#!/usr/bin/env bash
        set -euo pipefail
        
        function help(){
        cat &lt;&lt; EOF
        Python Data Science Environment
        
        help    : Display help text
        restore : Fetch dependencies
        dev     : Spawn a notebook server
        EOF
        }
        
        function run_restore(){
        pipenv install
        }
        
        function run_dev(){
        pipenv run jupyter notebook
        }
        
        function main(){
        cmd=${1-restore}
        shift || true
        case &quot;$cmd&quot; in
        help)
        help
        ;;
        restore)
        run_restore
        ;;
        dev)
        run_dev
        ;;
        *)
        echo &quot;no-op $cmd&quot;
        ;;
        esac
        }
        
        main &quot;$@&quot;
        </code></pre>
        <p>This allows me to <code>./run restore</code> to fetch my dependencies and <code>./run dev</code> to
        spawn a notebook. Two commands that are shared with other projects to reduce
        cognitive load. No more &quot;oh, what's that command to run it again?&quot;, and if I
        need a refresher. <code>./run help</code> tells me everything I need to stand it up again.</p>
        <h2>Git Gotchas</h2>
        <ol>
        <li>
        <p>Add <code>/.ipynb_checkpoints</code> to your <code>.gitignore</code>. They can get pretty large in
        size and dealing with those is no fun later.</p>
        </li>
        <li>
        <p>Be careful when committing notebooks because they can contain results from
        cells. This might be what you want, but running them again changes the notebook
        and this shows up in the diff. Git shows this as a gigantic JSON mess, and
        GitHub/GitLab's no better.</p>
        </li>
        </ol>
        <p>In the early stages of your project, make a choice to either include results or
        not include results. If you choose not to, you can use a tool like
        <a href="https://github.com/kynan/nbstripout">nbstripout</a> and a git hook to clean prior
        to the commit. I'm inclined to not include the results because results should be
        reproducible on any machine.</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 19 Apr 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>White Heat: The case for Acceleration</title>
      <link>https://jfg.name/posts/accelerate/</link>
      <guid isPermaLink="false">https://jfg.name/posts/accelerate/</guid>
      <description>Acceleration and its future</description>
      <content:encoded>
        <![CDATA[<p>A nation needs three key elements:</p>
        <ol>
        <li>Agriculture</li>
        <li>Energy production</li>
        <li>Human capital</li>
        </ol>
        <p>Everything else is downstream of these things. No food means armies marching on
        empty stomachs. No energy production means no industrial capital. No human
        capital means we're growing crops and installing wind turbines for nothing.</p>
        <p>A simple question: has the per-capita demand equivalents of these things
        decreased in the past ten years, or increased?</p>
        <p>For ascendant nations, the energy portion of this has <a href="https://ourworldindata.org/grapher/per-capita-energy-use?tab=chart">increased, not
        decreased</a>.
        Such is the nature of <a href="https://en.wikipedia.org/wiki/Jevons_paradox">the Jevons
        Paradox</a>. For stagnant and
        declining powers, the opposite is true.</p>
        <hr>
        <p>For <a href="https://www.gov.uk/government/publications/net-zero-strategy">Net Zero
        policy</a> to work,
        it has to cap all three of these things and eventually make the per-capita
        amounts of agriculture, energy production, and human capital use reverse.</p>
        <p>A cap on agriculture combined with an increasing amount of human capital results
        in that human capital starving. A cap on energy production combined with an
        increasing amount of human capital results in energy shortages. In the biz, we
        call this &quot;<a href="https://en.wikipedia.org/wiki/Demand_response#Load_shedding">Load
        shedding</a>&quot;. And the
        less stated about the cap on human capital, the better: who wants to live in a
        country where education levels are stagnant?</p>
        <p>Regardless: caps on supply without caps on demand results in artificial
        scarcity, and caps on demand are completely unfeasible without resorting to
        a 1984-style surveillance state, and given Britain doesn't even have a way to
        unify patient records between NHS trusts, it wouldn't work even if it was
        desirable that it did.</p>
        <p>It's time to move on.</p>
        <hr>
        <p>Let's look at proxies for the three basic elements.</p>
        <pre><code>1. Agriculture -&gt; Land, crops, livestock, machinery
        
        2. Energy production -&gt; Fuel extraction, fuel consumption, energy storage
        
        3. Human capital -&gt; Food, shelter, physical safety, healthcare, education
        </code></pre>
        <p>How do we keep agriculture and energy production pace with the expansion in
        human capital?</p>
        <p>Let's start by looking at what we <em>shouldn't</em> do.</p>
        <p>We <em>shouldn't</em>:</p>
        <ul>
        <li>
        <p>Pay farmers to <a href="https://www.gov.uk/government/publications/apply-for-a-lump-sum-payment-to-leave-or-retire-from-farming/how-to-apply-for-a-lump-sum-payment-to-leave-or-retire-from-farming">exit the agriculture
        business</a>.</p>
        </li>
        <li>
        <p>Prevent nuclear energy projects from happening because <a href="https://twitter.com/mlanetrain/status/1556381583585804291?lang=en">&quot;it'll only come
        online in ten
        years' time&quot;</a>.</p>
        </li>
        <li>
        <p>Keep adding more human capital without considering the human capital use per
        capita or productivity per capita. This requires more nuanced discussion
        that just isn't possible in today's social climate.</p>
        </li>
        </ul>
        <p>So what should we do instead?</p>
        <ul>
        <li>
        <p>Encourage farmers to stay in the agriculture business. Make it easier for them
        to increase farm productivity. Encourage productivity increases through
        superior technology. If <a href="https://library.wur.nl/WebQuery/wurpubs/fulltext/498900">the Dutch can do
        it</a>, Britain can do
        it too. Make food cheap again!</p>
        </li>
        <li>
        <p>Build more energy production facilities. Cheap energy makes everything
        possible. Build nuclear power stations in every postcode area! Not just
        nuclear, either. Let there be a plurality of energy sources. The more the
        merrier.</p>
        </li>
        <li>
        <p>Aim to increase the productivity of human capital. Instead of just adding more
        human capital units to the human capital pile, encourage people to pursue
        life-long learning. We used to do this with the <a href="https://en.wikipedia.org/wiki/Polytechnic_(United_Kingdom)">Polytechnic
        system</a>. The
        internet allows people to educate themselves for free, but there is still
        more to do here.</p>
        </li>
        </ul>
        <hr>
        <p>Look at these charts, courtesy of the
        <a href="https://www.ons.gov.uk/economy/inflationandpriceindices#timeseries">ONS</a>.</p>
        <table>
        <thead>
        <tr>
        <th>Housing (1987-2024)</th>
        <th>Consumer Electronics (1987-2024)</th>
        </tr>
        </thead>
        <tbody>
        <tr>
        <td><img src="https://jfg.name/img/rpi-housing.webp" alt="Housing, 1987-2024"></td>
        <td><img src="https://jfg.name/img/rpi-electronics.webp" alt="Electrical Appliances, 1987-2024"></td>
        </tr>
        </tbody>
        </table>
        <p>The cost of housing has increased, while the <a href="https://www.tiktok.com/@newhomequalitycontrol/video/7043682965079084293">quality of housing has
        decreased</a>.
        Do you not want your
        <a href="https://twitter.com/CrossDavidB/status/1548273039376203777">Deanobox</a>,
        Anon?</p>
        <p>Meanwhile, consumer electronics have decreased in cost to the consumer <strong>and</strong>
        increased in quality. Compare an old cathode-ray box to a new 4K OLED panel,
        compare an old Nokia to a new iPhone, compare a PlayStation 1 to a PlayStation
        5.</p>
        <p>Who would you want running the world: the people who made housing ruinously
        expensive with paper-thin walls, or the people who made televisions cheap while
        making the screens contain 36 times as many pixels?</p>
        <p>Imagine if your house was 36 times as good. Imagine if your healthcare was 36
        times as good. Imagine if your education was 36 times as good. Why aren't they?</p>
        <hr>
        <p>Cheap is better than free. Just because something could be free at the point of
        use doesn't mean that there are no costs to production. Making something free to
        the user simply means that the user will use it without consideration to cost.
        Remember the Dogecoin <a href="https://bitcoinwiki.org/wiki/faucet">faucets</a>? Where are
        they now?</p>
        <blockquote>
        <p>cheap &gt; free</p>
        </blockquote>
        <p>Cheap, though? I think we can agree on making things cheaper. The only people
        who won't agree are the
        <a href="https://en.wikipedia.org/wiki/Greater_fool_theory">bagholders</a>. I don't see
        anyone crying for speculators. Progress has its casualties.</p>
        <hr>
        <blockquote>
        <p>You can climb a mountain</p>
        <p>You can swim the sea</p>
        <p>You can jump into the fire</p>
        <p>But you'll never be free</p>
        </blockquote>
        <p>When you think about it, acceleration is just thermodynamics. It's all just
        thermodynamics. <a href="https://www.scientificamerican.com/article/a-new-physics-theory-of-life/">Life is on fire, didn't you
        know</a>.</p>
        <p>The arrow of time goes in one direction. It never goes back. Deceleration is
        really acceleration in decay. Regardless of how much it decays, it won't stop.
        It will just creep along. Human growth is accelerating. Society must also
        accelerate. Technology is one way to achieve that.</p>
        <hr>
        <p><img src="https://jfg.name/img/pixel-horizon.webp" alt="A horizon made of pixels"></p>
        <blockquote>
        <p>Acceleration is the highest form of charity.</p>
        </blockquote>
        <p>If you want the future to be bright, you need to accelerate. Step on the
        accelerator pedal with both feet. The future can look after itself.</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 23 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>CGI&apos;s not dead, I wrote some yesterday</title>
      <link>https://jfg.name/posts/cgis-not-dead/</link>
      <guid isPermaLink="false">https://jfg.name/posts/cgis-not-dead/</guid>
      <description>Build like it&apos;s 1999 with CGI</description>
      <content:encoded>
        <![CDATA[<blockquote>
        <p>The past is a different place; they do things differently there.</p>
        </blockquote>
        <p>Build like it's 1999 with Common Gateway Interface scripts!</p>
        <p>It's also a great learning experience. Learn the <a href="https://www.ietf.org/rfc/rfc2616.txt">HTTP specification</a> by implementing it!</p>
        <h2>Old School</h2>
        <p>The humble <a href="https://www.rfc-editor.org/rfc/rfc3875">Common Gateway Interface</a> was the first stab at making dynamic web pages. It represents a standardised way for a web server to pass request information to a program such that the program can interpret the request and build a response, using operating system primitives.</p>
        <pre><code>+---------+  request   +--------+  stdin   +---------+
        | Browser | ---------&gt; | Server | -------&gt; | Program |
        |         | &lt;--------- |        | &lt;------- |         |
        +---------+  response  +--------+  stdout  +---------+
        (stdout)      |       stderr
        errors |
        (stderr)|    +----------+
        +--&gt; | Error    |
        | Logs     |
        +----------+
        </code></pre>
        <p>Request goes into the program via <code>stdin</code>, and the output to be passed to the server is returned by <code>stdout</code>, with errors put into <code>stderr</code> going into the logs.</p>
        <p>Even though it's old, it is <a href="https://docs.python.org/3/library/cgi.html">still in Python's standard libary</a>, albeit for not much longer. As long as your script can read <code>os.environ['QUERY_STRING']</code> or the equivalent in your programming language from the environment variables, it'll work, and as long as it can return a string to the web server, it'll work. The <code>cgi</code> library is a helpful abstraction in most cases.</p>
        <p>The execution model is very simple: one process per HTTP request. In this way, it's possible to have very cheap isolation of database connections, provided you don't mind plenty of database connections being spawned under high load. <a href="http://z505.com/cgi-bin/qkcont/qkcont.cgi?p=Myths%20About%20CGI%20Scalability">The operating system does a lot for you anyway</a>.</p>
        <p><code>CGI</code> is incredibly portable. Every wondered why some consumer routers have <code>.cgi</code> in the URLs of the various admin pages that they use? That is a <code>CGI</code> script. The set-and-forget devices are optimised to use as few libraries as possible, and what is simpler than <code>stdin</code>, <code>stdout</code>, and <code>stderr</code>?</p>
        <p>Here's an example <code>CGI</code> script for <code>bash</code>.</p>
        <pre><code class="language-bash">#!/usr/bin/env bash
        
        function content_type() {
        case $1 in
        'plain')
        printf &quot;Content-Type: text/plain\n&quot;
        ;;
        'json')
        printf &quot;Content-Type: application/json\n&quot;
        ;;
        'html')
        printf &quot;Content-Type: text/html\n&quot;
        ;;
        *)
        printf &quot;Content-Type: text/plain\n&quot;
        ;;
        esac
        }
        
        function status() {
        case $1 in
        '200')
        printf &quot;200 OK\n&quot;
        ;;
        '400')
        printf &quot;400 Bad Request\n&quot;
        ;;
        '401')
        printf &quot;401 Unauthorised\n&quot;
        ;;
        '403')
        printf &quot;403 Forbidden\n&quot;
        ;;
        '404')
        printf &quot;404 Not Found\n&quot;
        ;;
        '418')
        printf &quot;418 I'm a teapot\n&quot;
        ;;
        '451')
        printf &quot;451 Unavailable For Legal Reasons\n&quot;
        ;;
        '500')
        printf &quot;500 Internal Server Error\n&quot;
        ;;
        *)
        printf &quot;200 OK\n&quot;
        ;;
        esac
        }
        
        function headers() {
        status $1
        content_type $2
        printf &quot;\n&quot;
        }
        
        headers 200 text
        env
        </code></pre>
        <p>What can be simpler than that?</p>
        <h2>Footguns</h2>
        <p>The downside to <code>CGI</code>'s flexibility is how easy it is to footgun yourself with <code>CGI</code>.</p>
        <ol>
        <li>
        <p>It's very easy to misconfigure something. Forgot to set <code>chmod +x</code>? That <code>CGI</code> script is now a file ready to download. It is possible to set your webserver to not serve files ending with a filetype or in a directory if they're not executable, but this is an additional step, not the default. It's easy to accidentally expose secrets this way if you're lazy and put hardcoded credentials in your scripts.</p>
        </li>
        <li>
        <p>You have to aggressively filter what goes in the script. Most frameworks do this by default, but not <code>CGI</code>, not in the land of <code>stdin/stdout/stderr</code>. This is one of the reasons why web frameworks eventually superseded <code>CGI</code> in production usage.</p>
        </li>
        <li>
        <p>One process per HTTP request. Memory leaks are made substantially worse under load. Freeing up memory involves blindly <code>kill -9</code> on lots of HTTP requests.</p>
        </li>
        </ol>
        <p>Most of this can be boiled down to system administration headaches. <code>CGI</code> development requires some faculty with system administration and system administration tools. It is for this reason I don't recommend it for production web server usage unless you are able to keep the system very simple and are able to spend plenty of time tightening up inputs from the web client.</p>
        <h2>What I Use It For</h2>
        <p>I use it for prototyping, mostly because it's very simple and it lets me build out core functionality before worrying about technical details too much. I have a simple Python wrapper around <code>cgi</code> and <code>sqlite</code> that allows me to do this.</p>
        <p>The structure I use looks like this:</p>
        <pre><code>├── index.html
        ├── index.js
        ├── index.css
        ├── data/
        │   └── database.db
        └── cgi-bin
        ├── helper.py
        ├── login.py
        ├── logout.py
        └── function.py
        </code></pre>
        <p>I can use the following helper functions to create an endpoint.</p>
        <pre><code class="language-python">import os
        import sys
        
        import http.cookies
        import sqlite3
        
        content = {
        'json': 'Content-Type: application/json;\n',
        'text': 'Content-Type: text/plain;\n',
        'html': 'Content-Type: text/html;\n'
        }
        
        responses = {
        'continue':                       '100 Continue',
        'switching-protocols':            '101 Switching Protocols',
        'processing':                     '102 Processing',
        'ok':                             '200 OK',
        'created':                        '201 Created',
        'accepted':                       '202 Accepted',
        'non-authoritative':              '203 Non-Authoritative Information',
        'no-content':                     '204 No Content',
        'reset-content':                  '205 Reset Content',
        'partial-content':                '206 Partial Content',
        'multi-status':                   '207 Multi-Status',
        'already-reported':               '205 Already Reported',
        'im-used':                        '205 IM Used',
        'multiple-choices':               '300 Multiple Choices',
        'permanently-moved':              '301 Moved Permanently',
        'found':                          '302 Found',
        'see-other':                      '303 See Other',
        'not_modified':                   '304 Not Modified',
        'use-proxy':                      '305 Use Proxy',
        'temporary-redirect':             '307 Temporary Redirect',
        'permanant-redirect':             '308 Permanent Redirect',
        'bad-request':                    '400 Bad Request',
        'unauthorised':                   '401 Unauthorized',
        'payment-required':               '402 Payment Required',
        'forbidden':                      '403 Forbidden',
        'not-found':                      '404 Not Found',
        'method-not-allowed':             '405 Method Not Allowed',
        'not-acceptable':                 '406 Not Acceptable',
        'proxy-auth-needed':              '407 Proxy Authentication Required',
        'timeout':                        '408 Request Timeout',
        'conflict':                       '409 Conflict',
        'gone':                           '410 Gone',
        'length-required':                '411 Length Required',
        'precondition-failed':            '412 Precondition Failed',
        'payload-too-large':              '413 Payload Too Large',
        'request-uri-too-long':           '414 Request-URI Too Long',
        'unsupported-media-type':         '415 Unsupported Media Type',
        'range-not-satisfiable':          '416 Requested Range Not Satisfiable',
        'expectation-failed':             '417 Expectation Failed',
        'teapot':                         '418 I\'m a teapot',
        'misdirected':                    '421 Misdirected Request',
        'unprocessable':                  '422 Unprocessable Entity',
        'locked':                         '423 Locked',
        'failed-dependency':              '424 Failed Dependency',
        'upgrade-required':               '426 Upgrade Required',
        'precondition-required':          '428 Precondition Required',
        'too-many-requests':              '429 Too Many Requests',
        'fields-too-large':               '431 Request Header Fields Too Large',
        'connection-closed':              '444 Connection Closed Without Response',
        'censorship':                     '451 Unavailable For Legal Reasons',
        'client-closed':                  '499 Client Closed Request',
        'internal-error':                 '500 Internal Server Error',
        'not-implemented':                '501 Not Implemented',
        'bad-gateway':                    '502 Bad Gateway',
        'service-unavailable':            '503 Service Unavailable',
        'gateway-timeout':                '504 Gateway Timeout',
        'unsupported':                    '505 HTTP Version Not Supported',
        'variant-negotiates':             '506 Variant Also Negotiates',
        'insufficient-storage':           '507 Insufficient Storage',
        'loop':                           '508 Loop Detected',
        'not-extended':                   '510 Not Extended',
        'network-authorisation-required': '511 Network Authentication Required',
        'network-timeout':                '599 Network Connect Timeout Error'
        }
        
        def build_headers(status, content_type):
        return &quot;&quot;.join([responses.get(status), content.get(content_type)])
        
        def get_fields(field_storage):
        return {k:field_storage[k].value for k in field_storage.keys()}
        
        def get_cookie(cookie_string):
        cookie = http.cookies.SimpleCookie()
        cookie.load(cookie_string)
        return {k:cookie[k].value for k in cookie}
        
        def set_cookie(args):
        cookie = http.cookies.SimpleCookie()
        for key in args:
        cookie[key] = args[key]
        return cookie
        
        def redirect_to(url, message):
        return '''
        &lt;head&gt;
        &lt;meta http-equiv=&quot;refresh&quot; content=&quot;5; URL={url}&quot; /&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;p&gt;{message}&lt;/p&gt;
        &lt;p&gt;If you are not redirected in five seconds, &lt;a href=&quot;{url}&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
        &lt;/body&gt;
        '''.format(url=url, message=message)
        
        def db(location):
        def factory(cursor, row):
        d = {}
        for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
        return d
        
        conn = sqlite3.connect(os.path.join(location))
        conn.row_factory = factory
        cur = conn.cursor()
        return conn, cur
        </code></pre>
        <p>To spawn a basic development server, I just run <code>python3 -m http.server --cgi</code> in the root of the project. The really neat thing is that you don't have to reload the server at all, because scripts are loaded and executed with every request. True stateless development!</p>
        <p>Working this way means I don't have to worry about setting up <code>FastAPI</code> or <code>Django</code>, or making a <code>Docker</code> container before I have to. I can focus on the business logic and datastore, and when it's time to scale up, I can move most of those functions to a framework mostly intact. I love the <code>Python + CGI + SQLite + VanillaJS</code> prototyping stack. I use it for prototyping, then I move away it once it reaches its limits.</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 01 Apr 2023 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>