<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>My RSS Feed</title>
    <link>https://jfg.name/</link>
    <atom:link href="https://jfg.name/feed.rss" rel="self" type="application/rss+xml"/>
    <description></description>
    <lastBuildDate>Fri, 19 Apr 2024 22:17:14 GMT</lastBuildDate>
    <language>en</language>
    <generator>Lume v2.0.3</generator>
    <item>
      <title>Using Jupyter with Pipenv</title>
      <link>https://jfg.name/posts/using-jupyter-with-pipenv/</link>
      <guid isPermaLink="false">https://jfg.name/posts/using-jupyter-with-pipenv/</guid>
      <description>Building a data science environment</description>
      <content:encoded>
        <![CDATA[<p>Being vaguely involved in data science tooling means I have some exposure to
        <a href="https://jupyter.org/">Jupyter</a>, and this is the setup that I found works for me.</p>
        <h2>Environment Management</h2>
        <p>I use <a href="https://pipenv.pypa.io/en/latest/">Pipenv</a>-- no real reason to use this
        over <a href="https://python-poetry.org/">Poetry</a>, but I like Pipenv's ability to create
        a virtualenv elsewhere on the system and I think the API's a little bit cleaner.</p>
        <p>Really, as long as it creates a virtualenv and Jupyter can see this virtualenv,
        it'll be fine.</p>
        <p>Make sure you have Pipenv installed, then make a Pipenv environment.</p>
        <pre><code class="language-bash">pipenv --python 3.11        # Create the environment
        pipenv install jupyter      # Add jupyter to it
        pipenv run jupyter notebook # Spawn a Jupyter server
        </code></pre>
        <p>This approach does create a Jupyter install per project. I think this is fine,
        it cuts down complexity, and Jupyter isn't that heavy these days. If you want to
        use a system-wide Jupyter, you can do the following:</p>
        <pre><code class="language-bash"># Inside your project folder
        cd project-folder/
        pipenv install ipykernel
        
        # Add the kernel to the user's ipython kernels
        pipenv shell
        python3 -m ipykernel install --user --name=&lt;your-venv-name&gt;
        
        # Outside of the shell (deactivate)
        jupyter notebook
        </code></pre>
        <p>This should allow your kernel to be used inside the system Jupyter server. I
        prefer not doing this and keeping it simpler with a Jupyter server inside every
        data science environment. There are disadvantages here: you can't run more than
        one project at a time, and you can't share kernels between projects, but I
        haven't run into those yet.</p>
        <h2>The Runfile</h2>
        <p>In keeping with the
        <a href="https://github.blog/2015-06-30-scripts-to-rule-them-all/">Runfiles</a> that I use
        elsewhere, this is a slim one that I use.</p>
        <pre><code class="language-bash">#!/usr/bin/env bash
        set -euo pipefail
        
        function help(){
        cat &lt;&lt; EOF
        Python Data Science Environment
        
        help    : Display help text
        restore : Fetch dependencies
        dev     : Spawn a notebook server
        EOF
        }
        
        function run_restore(){
        pipenv install
        }
        
        function run_dev(){
        pipenv run jupyter notebook
        }
        
        function main(){
        cmd=${1-restore}
        shift || true
        case &quot;$cmd&quot; in
        help)
        help
        ;;
        restore)
        run_restore
        ;;
        dev)
        run_dev
        ;;
        *)
        echo &quot;no-op $cmd&quot;
        ;;
        esac
        }
        
        main &quot;$@&quot;
        </code></pre>
        <p>This allows me to <code>./run restore</code> to fetch my dependencies and <code>./run dev</code> to
        spawn a notebook. Two commands that are shared with other projects to reduce
        cognitive load. No more &quot;oh, what's that command to run it again?&quot;, and if I
        need a refresher. <code>./run help</code> tells me everything I need to stand it up again.</p>
        <h2>Git Gotchas</h2>
        <ol>
        <li>
        <p>Add <code>/.ipynb_checkpoints</code> to your <code>.gitignore</code>. They can get pretty large in
        size and dealing with those is no fun later.</p>
        </li>
        <li>
        <p>Be careful when committing notebooks because they can contain results from
        cells. This might be what you want, but running them again changes the notebook
        and this shows up in the diff. Git shows this as a gigantic JSON mess, and
        GitHub/GitLab's no better.</p>
        </li>
        </ol>
        <p>In the early stages of your project, make a choice to either include results or
        not include results. If you choose not to, you can use a tool like
        <a href="https://github.com/kynan/nbstripout">nbstripout</a> and a git hook to clean prior
        to the commit. I'm inclined to not include the results because results should be
        reproducible on any machine.</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 19 Apr 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>In praise of SQLite</title>
      <link>https://jfg.name/posts/in-praise-of-sqlite/</link>
      <guid isPermaLink="false">https://jfg.name/posts/in-praise-of-sqlite/</guid>
      <description>Why I reach for SQLite first.</description>
      <content:encoded>
        <![CDATA[<p><a href="https://www.sqlite.org/index.html">SQLite</a> is a fantastic datastore that is
        applicable to most use cases. Think of it as <code>fopen()</code> with testable SQL
        queries. It finds regular use in most mobile devices, many desktop and mobile
        applications, some embedded devices, a few web services as well...</p>
        <p>While it primarily exists at the edges of the network, it can also work at the
        centre of the network.</p>
        <p><a href="https://corecursive.com/066-sqlite-with-richard-hipp/">The story of how it happened is something to
        read</a>, and in an age of
        software that stops being supported as soon as it becomes unfashionable, it's a
        big relief to find that SQLite's developers plan to support it <a href="https://www.sqlite.org/lts.html">through to
        2050</a>.</p>
        <h2>Exploration</h2>
        <p>A trick I like to use is using SQLite to manipulate CSV files. One old
        interview question used to be searching inside a CSV, and loading the CSV into
        SQLite means you can use good old SQL queries to do this.</p>
        <pre><code>$ sqlite3 file.db
        sqlite&gt; .mode csv
        sqlite&gt; .import file.csv imported_csv
        sqlite&gt; .exit
        </code></pre>
        <p>I remember being given a 2GB CSV dump to do with ▇▇▇▇▇▇▇▇▇▇ and trying to open
        it with Excel. Someone showed me how to load a big CSV into SQLite and perform a
        query on it, and this became the first version of a tool that I'm told is still
        used today. Another <a href="https://til.simonwillison.net/sqlite/one-line-csv-operations">trick is using SQLite and a bash
        oneliner</a> to
        effectively run a <code>SELECT</code> over a CSV. Data scientists: don't discount it! Ditch
        the Excel macro and learn some reproducible SQL instead.</p>
        <p>Another tool I like to use is <a href="https://datasette.io/">Datasette</a>. I found it to
        work well with exploring data, although it's not as comprehensive as something
        like QGIS for manipulating this data.</p>
        <h2>In-memory operations</h2>
        <p>It is also possible to use SQLite
        <a href="https://www.sqlite.org/inmemorydb.html">in-memory</a>. I find this to be a useful
        alternative to <a href="https://pandas.pydata.org/">Pandas</a>, especially if the
        operations wanted are simple enough and you don't want the mess of a gigantic
        Pandas call for things like aggregation over rows. Just open it as an in-memory
        database, insert your data, do your operations, then close the connection.</p>
        <pre><code class="language-python">import sqlite3
        
        conn = sqlite3.connect(':memory:')
        conn.execute(&quot;select 1;&quot;).fetchall() # -&gt; [(1,)]
        </code></pre>
        <p>I tend to do this for small datasets because operations done in RAM are quicker
        than reads and writes to a database file. The added bonus is that you can change
        <code>:memory:</code> for a file, then inspect this database file while you halt your
        program in the debugger.</p>
        <h2>Geospatial data</h2>
        <p>I tend to prototype GIS projects using
        <a href="https://www.gaia-gis.it/fossil/libspatialite/index">SpatiaLite</a>. SpatiaLite is
        also <a href="https://docs.qgis.org/2.8/en/docs/training_manual/databases/spatialite.html">supported in
        QGIS</a>,
        and anything that can open a SQLite file can also open SpatiaLite with
        <code>mod_spatialite</code> installed. SpatiaLite is an extension to SQLite, so to enable
        it in your Python application, you can simply <code>SELECT load_extension(&quot;mod_spatialite&quot;)</code> to enable it.</p>
        <pre><code class="language-python">import os
        import sqlite3
        
        def connect(path):
        conn = sqlite3.connect(os.path.join(path))
        conn.enable_load_extension(True)
        conn.execute(&quot;SELECT load_extension('mod_spatialite')&quot;)
        conn.execute(&quot;SELECT InitSpatialMetaData(1);&quot;)
        
        return conn, conn.cursor()
        
        conn, cur = connect('path/to/database.db')
        conn.close()
        </code></pre>
        <p>My only issue is that this requires an additional <code>mod_spatialite</code> and
        <code>spatialite-bin</code> on any machine which needs to use the spatial functionality.
        <a href="https://docs.djangoproject.com/en/5.0/ref/contrib/gis/install/spatialite/">This guide is helpful for
        installation</a>.</p>
        <h2>Prototyping</h2>
        <p><a href="https://www.youtube.com/watch?v=gUYBFDPZ5qk">Fireship built a simple chat application with
        PocketBase</a>. You can think of
        PocketBase as a <a href="https://pocketbase.io/">wrapper and web server around SQLite</a>,
        although that is selling it massively short.</p>
        <p>Datasette also allows you to expose an API to query your SQLite database, but
        PocketBase is more comprehensive in my opinion and it also has an administration
        panel out of the box with sensible default options.</p>
        <p>I tend to use it to make a datastore before choosing which database to actually
        use, but I find that I'm able to take <code>sqlite</code> quite far anyway.</p>
        <h2>The cutting edge</h2>
        <p>If you find yourself wanting to scale your database, read the <a href="https://www.sqlite.org/arch.html">Architecture doc</a> first. Get familiar with how it works, and where the slow points are likely to be.</p>
        <p>In my experience, look in this order:</p>
        <ol>
        <li>
        <p>Your queries-- are they using indexes?</p>
        </li>
        <li>
        <p>Your structure-- do you index what you need to index?</p>
        </li>
        <li>
        <p>Your connections-- do you read and write in one place only?</p>
        </li>
        </ol>
        <p>Once you've exhausted these, look into the <a href="https://www.sqlite.org/wal.html">WAL</a>. Out of the box, SQLite implements atomicity through a rollback journal, which locks the file. Compare to WAL per the docs:</p>
        <blockquote>
        <ol>
        <li>
        <p>WAL is significantly faster in most scenarios.</p>
        </li>
        <li>
        <p>WAL provides more concurrency as readers do not block writers and a writer
        does not block readers. Reading and writing can proceed concurrently.</p>
        </li>
        <li>
        <p>Disk I/O operations tends to be more sequential using WAL.</p>
        </li>
        <li>
        <p>WAL uses many fewer fsync() operations and is thus less vulnerable to
        problems on systems where the fsync() system call is broken.</p>
        </li>
        </ol>
        </blockquote>
        <p>It's no panacea, and you should read the document closely and evaluate whether
        the trade-offs are worth it. Sometimes the database <em>isn't</em> the problem. Being a
        file-based database, you are ultimately at the mercy of the filesystem. Once you
        start down this rabbit hole, it's time to look into database servers.</p>
        <h2>Alternatives</h2>
        <p>If you're doing a lot of column-wise analytics work, give
        <a href="https://duckdb.org/">DuckDB</a> a go. Like SQLite, it can be used in-memory. There
        are libraries available for Python, R, Java, and Node. Installation is a single
        binary at simplest. There's support for importing
        <a href="https://parquet.apache.org/">Parquets</a>. There's a reasonable <a href="https://duckdb.org/docs/extensions/spatial">Spatial
        extension</a> which is easier to set up
        than SpatiaLite ever has been.</p>
        <p>There's even a <a href="https://duckdb.org/docs/extensions/sqlite">SQLite extension</a>
        which can talk to SQLite files!</p>
        <p>There will come a point where embedded databases quite simply won't scale, and
        that's fine. SQLite has some problems with concurrency. If you're fine with
        allowing only one connection to SQLite (essentially making a quasi-service),
        that's fine, but consider a database server instead, like PostgreSQL, or MySQL,
        or MariaDB.</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>White Heat: The case for Acceleration</title>
      <link>https://jfg.name/posts/accelerate/</link>
      <guid isPermaLink="false">https://jfg.name/posts/accelerate/</guid>
      <description>Acceleration and its future</description>
      <content:encoded>
        <![CDATA[<p>A nation needs three key elements:</p>
        <ol>
        <li>Agriculture</li>
        <li>Energy production</li>
        <li>Human capital</li>
        </ol>
        <p>Everything else is downstream of these things. No food means armies marching on
        empty stomachs. No energy production means no industrial capital. No human
        capital means we're growing crops and installing wind turbines for nothing.</p>
        <p>A simple question: has the per-capita demand equivalents of these things
        decreased in the past ten years, or increased?</p>
        <p>For ascendant nations, the energy portion of this has <a href="https://ourworldindata.org/grapher/per-capita-energy-use?tab=chart">increased, not
        decreased</a>.
        Such is the nature of <a href="https://en.wikipedia.org/wiki/Jevons_paradox">the Jevons
        Paradox</a>. For stagnant and
        declining powers, the opposite is true.</p>
        <hr>
        <p>For <a href="https://www.gov.uk/government/publications/net-zero-strategy">Net Zero
        policy</a> to work,
        it has to cap all three of these things and eventually make the per-capita
        amounts of agriculture, energy production, and human capital use reverse.</p>
        <p>A cap on agriculture combined with an increasing amount of human capital results
        in that human capital starving. A cap on energy production combined with an
        increasing amount of human capital results in energy shortages. In the biz, we
        call this &quot;<a href="https://en.wikipedia.org/wiki/Demand_response#Load_shedding">Load
        shedding</a>&quot;. And the
        less stated about the cap on human capital, the better: who wants to live in a
        country where education levels are stagnant?</p>
        <p>Regardless: caps on supply without caps on demand results in artificial
        scarcity, and caps on demand are completely unfeasible without resorting to
        a 1984-style surveillance state, and given Britain doesn't even have a way to
        unify patient records between NHS trusts, it wouldn't work even if it was
        desirable that it did.</p>
        <p>It's time to move on.</p>
        <hr>
        <p>Let's look at proxies for the three basic elements.</p>
        <pre><code>1. Agriculture -&gt; Land, crops, livestock, machinery
        
        2. Energy production -&gt; Fuel extraction, fuel consumption, energy storage
        
        3. Human capital -&gt; Food, shelter, physical safety, healthcare, education
        </code></pre>
        <p>How do we keep agriculture and energy production pace with the expansion in
        human capital?</p>
        <p>Let's start by looking at what we <em>shouldn't</em> do.</p>
        <p>We <em>shouldn't</em>:</p>
        <ul>
        <li>
        <p>Pay farmers to <a href="https://www.gov.uk/government/publications/apply-for-a-lump-sum-payment-to-leave-or-retire-from-farming/how-to-apply-for-a-lump-sum-payment-to-leave-or-retire-from-farming">exit the agriculture
        business</a>.</p>
        </li>
        <li>
        <p>Prevent nuclear energy projects from happening because <a href="https://twitter.com/mlanetrain/status/1556381583585804291?lang=en">&quot;it'll only come
        online in ten
        years' time&quot;</a>.</p>
        </li>
        <li>
        <p>Keep adding more human capital without considering the human capital use per
        capita or productivity per capita. This requires more nuanced discussion
        that just isn't possible in today's social climate.</p>
        </li>
        </ul>
        <p>So what should we do instead?</p>
        <ul>
        <li>
        <p>Encourage farmers to stay in the agriculture business. Make it easier for them
        to increase farm productivity. Encourage productivity increases through
        superior technology. If <a href="https://library.wur.nl/WebQuery/wurpubs/fulltext/498900">the Dutch can do
        it</a>, Britain can do
        it too. Make food cheap again!</p>
        </li>
        <li>
        <p>Build more energy production facilities. Cheap energy makes everything
        possible. Build nuclear power stations in every postcode area! Not just
        nuclear, either. Let there be a plurality of energy sources. The more the
        merrier.</p>
        </li>
        <li>
        <p>Aim to increase the productivity of human capital. Instead of just adding more
        human capital units to the human capital pile, encourage people to pursue
        life-long learning. We used to do this with the <a href="https://en.wikipedia.org/wiki/Polytechnic_(United_Kingdom)">Polytechnic
        system</a>. The
        internet allows people to educate themselves for free, but there is still
        more to do here.</p>
        </li>
        </ul>
        <hr>
        <p>Look at these charts, courtesy of the
        <a href="https://www.ons.gov.uk/economy/inflationandpriceindices#timeseries">ONS</a>.</p>
        <table>
        <thead>
        <tr>
        <th>Housing (1987-2024)</th>
        <th>Consumer Electronics (1987-2024)</th>
        </tr>
        </thead>
        <tbody>
        <tr>
        <td><img src="https://jfg.name/img/rpi-housing.webp" alt="Housing, 1987-2024"></td>
        <td><img src="https://jfg.name/img/rpi-electronics.webp" alt="Electrical Appliances, 1987-2024"></td>
        </tr>
        </tbody>
        </table>
        <p>The cost of housing has increased, while the <a href="https://www.tiktok.com/@newhomequalitycontrol/video/7043682965079084293">quality of housing has
        decreased</a>.
        Do you not want your
        <a href="https://twitter.com/CrossDavidB/status/1548273039376203777">Deanobox</a>,
        Anon?</p>
        <p>Meanwhile, consumer electronics have decreased in cost to the consumer <strong>and</strong>
        increased in quality. Compare an old cathode-ray box to a new 4K OLED panel,
        compare an old Nokia to a new iPhone, compare a PlayStation 1 to a PlayStation
        5.</p>
        <p>Who would you want running the world: the people who made housing ruinously
        expensive with paper-thin walls, or the people who made televisions cheap while
        making the screens contain 36 times as many pixels?</p>
        <p>Imagine if your house was 36 times as good. Imagine if your healthcare was 36
        times as good. Imagine if your education was 36 times as good. Why aren't they?</p>
        <hr>
        <p>Cheap is better than free. Just because something could be free at the point of
        use doesn't mean that there are no costs to production. Making something free to
        the user simply means that the user will use it without consideration to cost.
        Remember the Dogecoin <a href="https://bitcoinwiki.org/wiki/faucet">faucets</a>? Where are
        they now?</p>
        <blockquote>
        <p>cheap &gt; free</p>
        </blockquote>
        <p>Cheap, though? I think we can agree on making things cheaper. The only people
        who won't agree are the
        <a href="https://en.wikipedia.org/wiki/Greater_fool_theory">bagholders</a>. I don't see
        anyone crying for speculators. Progress has its casualties.</p>
        <hr>
        <blockquote>
        <p>You can climb a mountain</p>
        <p>You can swim the sea</p>
        <p>You can jump into the fire</p>
        <p>But you'll never be free</p>
        </blockquote>
        <p>When you think about it, acceleration is just thermodynamics. It's all just
        thermodynamics. <a href="https://www.scientificamerican.com/article/a-new-physics-theory-of-life/">Life is on fire, didn't you
        know</a>.</p>
        <p>The arrow of time goes in one direction. It never goes back. Deceleration is
        really acceleration in decay. Regardless of how much it decays, it won't stop.
        It will just creep along. Human growth is accelerating. Society must also
        accelerate. Technology is one way to achieve that.</p>
        <hr>
        <p><img src="https://jfg.name/img/pixel-horizon.webp" alt="A horizon made of pixels"></p>
        <blockquote>
        <p>Acceleration is the highest form of charity.</p>
        </blockquote>
        <p>If you want the future to be bright, you need to accelerate. Step on the
        accelerator pedal with both feet. The future can look after itself.</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 23 Feb 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <link>https://jfg.name/</link>
      <guid isPermaLink="false">https://jfg.name/</guid>
      <content:encoded>
        <![CDATA[<h2>Posts</h2>
        
        <ul class="postList" style="list-style:none">
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/using-jupyter-with-pipenv/" ><strong>Using Jupyter with Pipenv</strong></a>
        -
        <em><time datetime="19/04/2024">
        19/04/2024
        </time></em>
        </li>
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/in-praise-of-sqlite/" ><strong>In praise of SQLite</strong></a>
        -
        <em><time datetime="26/03/2024">
        26/03/2024
        </time></em>
        </li>
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/accelerate/" ><strong>White Heat: The case for Acceleration</strong></a>
        -
        <em><time datetime="23/02/2024">
        23/02/2024
        </time></em>
        </li>
        
        <li class="postList-post">
        <a href="https://jfg.name/posts/cgis-not-dead/" ><strong>CGI&#39;s not dead, I wrote some yesterday</strong></a>
        -
        <em><time datetime="01/04/2023">
        01/04/2023
        </time></em>
        </li>
        
        </ul>
        
        ]]>
      </content:encoded>
      <pubDate>Sat, 17 Feb 2024 19:27:58 GMT</pubDate>
    </item>
    <item>
      <title>CGI&apos;s not dead, I wrote some yesterday</title>
      <link>https://jfg.name/posts/cgis-not-dead/</link>
      <guid isPermaLink="false">https://jfg.name/posts/cgis-not-dead/</guid>
      <description>Build like it&apos;s 1999 with CGI</description>
      <content:encoded>
        <![CDATA[<blockquote>
        <p>The past is a different place; they do things differently there.</p>
        </blockquote>
        <p>Build like it's 1999 with Common Gateway Interface scripts!</p>
        <p>It's also a great learning experience. Learn the <a href="https://www.ietf.org/rfc/rfc2616.txt">HTTP specification</a> by implementing it!</p>
        <h2>Old School</h2>
        <p>The humble <a href="https://www.rfc-editor.org/rfc/rfc3875">Common Gateway Interface</a> was the first stab at making dynamic web pages. It represents a standardised way for a web server to pass request information to a program such that the program can interpret the request and build a response, using operating system primitives.</p>
        <pre><code>+---------+  request   +--------+  stdin   +---------+
        | Browser | ---------&gt; | Server | -------&gt; | Program |
        |         | &lt;--------- |        | &lt;------- |         |
        +---------+  response  +--------+  stdout  +---------+
        (stdout)      |       stderr
        errors |
        (stderr)|    +----------+
        +--&gt; | Error    |
        | Logs     |
        +----------+
        </code></pre>
        <p>Request goes into the program via <code>stdin</code>, and the output to be passed to the server is returned by <code>stdout</code>, with errors put into <code>stderr</code> going into the logs.</p>
        <p>Even though it's old, it is <a href="https://docs.python.org/3/library/cgi.html">still in Python's standard libary</a>, albeit for not much longer. As long as your script can read <code>os.environ['QUERY_STRING']</code> or the equivalent in your programming language from the environment variables, it'll work, and as long as it can return a string to the web server, it'll work. The <code>cgi</code> library is a helpful abstraction in most cases.</p>
        <p>The execution model is very simple: one process per HTTP request. In this way, it's possible to have very cheap isolation of database connections, provided you don't mind plenty of database connections being spawned under high load. <a href="http://z505.com/cgi-bin/qkcont/qkcont.cgi?p=Myths%20About%20CGI%20Scalability">The operating system does a lot for you anyway</a>.</p>
        <p><code>CGI</code> is incredibly portable. Every wondered why some consumer routers have <code>.cgi</code> in the URLs of the various admin pages that they use? That is a <code>CGI</code> script. The set-and-forget devices are optimised to use as few libraries as possible, and what is simpler than <code>stdin</code>, <code>stdout</code>, and <code>stderr</code>?</p>
        <p>Here's an example <code>CGI</code> script for <code>bash</code>.</p>
        <pre><code class="language-bash">#!/usr/bin/env bash
        
        function content_type() {
        case $1 in
        'plain')
        printf &quot;Content-Type: text/plain\n&quot;
        ;;
        'json')
        printf &quot;Content-Type: application/json\n&quot;
        ;;
        'html')
        printf &quot;Content-Type: text/html\n&quot;
        ;;
        *)
        printf &quot;Content-Type: text/plain\n&quot;
        ;;
        esac
        }
        
        function status() {
        case $1 in
        '200')
        printf &quot;200 OK\n&quot;
        ;;
        '400')
        printf &quot;400 Bad Request\n&quot;
        ;;
        '401')
        printf &quot;401 Unauthorised\n&quot;
        ;;
        '403')
        printf &quot;403 Forbidden\n&quot;
        ;;
        '404')
        printf &quot;404 Not Found\n&quot;
        ;;
        '418')
        printf &quot;418 I'm a teapot\n&quot;
        ;;
        '451')
        printf &quot;451 Unavailable For Legal Reasons\n&quot;
        ;;
        '500')
        printf &quot;500 Internal Server Error\n&quot;
        ;;
        *)
        printf &quot;200 OK\n&quot;
        ;;
        esac
        }
        
        function headers() {
        status $1
        content_type $2
        printf &quot;\n&quot;
        }
        
        headers 200 text
        env
        </code></pre>
        <p>What can be simpler than that?</p>
        <h2>Footguns</h2>
        <p>The downside to <code>CGI</code>'s flexibility is how easy it is to footgun yourself with <code>CGI</code>.</p>
        <ol>
        <li>
        <p>It's very easy to misconfigure something. Forgot to set <code>chmod +x</code>? That <code>CGI</code> script is now a file ready to download. It is possible to set your webserver to not serve files ending with a filetype or in a directory if they're not executable, but this is an additional step, not the default. It's easy to accidentally expose secrets this way if you're lazy and put hardcoded credentials in your scripts.</p>
        </li>
        <li>
        <p>You have to aggressively filter what goes in the script. Most frameworks do this by default, but not <code>CGI</code>, not in the land of <code>stdin/stdout/stderr</code>. This is one of the reasons why web frameworks eventually superseded <code>CGI</code> in production usage.</p>
        </li>
        <li>
        <p>One process per HTTP request. Memory leaks are made substantially worse under load. Freeing up memory involves blindly <code>kill -9</code> on lots of HTTP requests.</p>
        </li>
        </ol>
        <p>Most of this can be boiled down to system administration headaches. <code>CGI</code> development requires some faculty with system administration and system administration tools. It is for this reason I don't recommend it for production web server usage unless you are able to keep the system very simple and are able to spend plenty of time tightening up inputs from the web client.</p>
        <h2>What I Use It For</h2>
        <p>I use it for prototyping, mostly because it's very simple and it lets me build out core functionality before worrying about technical details too much. I have a simple Python wrapper around <code>cgi</code> and <code>sqlite</code> that allows me to do this.</p>
        <p>The structure I use looks like this:</p>
        <pre><code>├── index.html
        ├── index.js
        ├── index.css
        ├── data/
        │   └── database.db
        └── cgi-bin
        ├── helper.py
        ├── login.py
        ├── logout.py
        └── function.py
        </code></pre>
        <p>I can use the following helper functions to create an endpoint.</p>
        <pre><code class="language-python">import os
        import sys
        
        import http.cookies
        import sqlite3
        
        content = {
        'json': 'Content-Type: application/json;\n',
        'text': 'Content-Type: text/plain;\n',
        'html': 'Content-Type: text/html;\n'
        }
        
        responses = {
        'continue':                       '100 Continue',
        'switching-protocols':            '101 Switching Protocols',
        'processing':                     '102 Processing',
        'ok':                             '200 OK',
        'created':                        '201 Created',
        'accepted':                       '202 Accepted',
        'non-authoritative':              '203 Non-Authoritative Information',
        'no-content':                     '204 No Content',
        'reset-content':                  '205 Reset Content',
        'partial-content':                '206 Partial Content',
        'multi-status':                   '207 Multi-Status',
        'already-reported':               '205 Already Reported',
        'im-used':                        '205 IM Used',
        'multiple-choices':               '300 Multiple Choices',
        'permanently-moved':              '301 Moved Permanently',
        'found':                          '302 Found',
        'see-other':                      '303 See Other',
        'not_modified':                   '304 Not Modified',
        'use-proxy':                      '305 Use Proxy',
        'temporary-redirect':             '307 Temporary Redirect',
        'permanant-redirect':             '308 Permanent Redirect',
        'bad-request':                    '400 Bad Request',
        'unauthorised':                   '401 Unauthorized',
        'payment-required':               '402 Payment Required',
        'forbidden':                      '403 Forbidden',
        'not-found':                      '404 Not Found',
        'method-not-allowed':             '405 Method Not Allowed',
        'not-acceptable':                 '406 Not Acceptable',
        'proxy-auth-needed':              '407 Proxy Authentication Required',
        'timeout':                        '408 Request Timeout',
        'conflict':                       '409 Conflict',
        'gone':                           '410 Gone',
        'length-required':                '411 Length Required',
        'precondition-failed':            '412 Precondition Failed',
        'payload-too-large':              '413 Payload Too Large',
        'request-uri-too-long':           '414 Request-URI Too Long',
        'unsupported-media-type':         '415 Unsupported Media Type',
        'range-not-satisfiable':          '416 Requested Range Not Satisfiable',
        'expectation-failed':             '417 Expectation Failed',
        'teapot':                         '418 I\'m a teapot',
        'misdirected':                    '421 Misdirected Request',
        'unprocessable':                  '422 Unprocessable Entity',
        'locked':                         '423 Locked',
        'failed-dependency':              '424 Failed Dependency',
        'upgrade-required':               '426 Upgrade Required',
        'precondition-required':          '428 Precondition Required',
        'too-many-requests':              '429 Too Many Requests',
        'fields-too-large':               '431 Request Header Fields Too Large',
        'connection-closed':              '444 Connection Closed Without Response',
        'censorship':                     '451 Unavailable For Legal Reasons',
        'client-closed':                  '499 Client Closed Request',
        'internal-error':                 '500 Internal Server Error',
        'not-implemented':                '501 Not Implemented',
        'bad-gateway':                    '502 Bad Gateway',
        'service-unavailable':            '503 Service Unavailable',
        'gateway-timeout':                '504 Gateway Timeout',
        'unsupported':                    '505 HTTP Version Not Supported',
        'variant-negotiates':             '506 Variant Also Negotiates',
        'insufficient-storage':           '507 Insufficient Storage',
        'loop':                           '508 Loop Detected',
        'not-extended':                   '510 Not Extended',
        'network-authorisation-required': '511 Network Authentication Required',
        'network-timeout':                '599 Network Connect Timeout Error'
        }
        
        def build_headers(status, content_type):
        return &quot;&quot;.join([responses.get(status), content.get(content_type)])
        
        def get_fields(field_storage):
        return {k:field_storage[k].value for k in field_storage.keys()}
        
        def get_cookie(cookie_string):
        cookie = http.cookies.SimpleCookie()
        cookie.load(cookie_string)
        return {k:cookie[k].value for k in cookie}
        
        def set_cookie(args):
        cookie = http.cookies.SimpleCookie()
        for key in args:
        cookie[key] = args[key]
        return cookie
        
        def redirect_to(url, message):
        return '''
        &lt;head&gt;
        &lt;meta http-equiv=&quot;refresh&quot; content=&quot;5; URL={url}&quot; /&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;p&gt;{message}&lt;/p&gt;
        &lt;p&gt;If you are not redirected in five seconds, &lt;a href=&quot;{url}&quot;&gt;click here&lt;/a&gt;.&lt;/p&gt;
        &lt;/body&gt;
        '''.format(url=url, message=message)
        
        def db(location):
        def factory(cursor, row):
        d = {}
        for idx, col in enumerate(cursor.description):
        d[col[0]] = row[idx]
        return d
        
        conn = sqlite3.connect(os.path.join(location))
        conn.row_factory = factory
        cur = conn.cursor()
        return conn, cur
        </code></pre>
        <p>To spawn a basic development server, I just run <code>python3 -m http.server --cgi</code> in the root of the project. The really neat thing is that you don't have to reload the server at all, because scripts are loaded and executed with every request. True stateless development!</p>
        <p>Working this way means I don't have to worry about setting up <code>FastAPI</code> or <code>Django</code>, or making a <code>Docker</code> container before I have to. I can focus on the business logic and datastore, and when it's time to scale up, I can move most of those functions to a framework mostly intact. I love the <code>Python + CGI + SQLite + VanillaJS</code> prototyping stack. I use it for prototyping, then I move away it once it reaches its limits.</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 01 Apr 2023 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>